[tool.poetry]
name = "utils"
version = "0.1.0"
description = ""
authors = ["Long Le <hjjddbz@gmail.com>"]
readme = "README.md"
packages = [{ include = "utils", from = "src" }]

[tool.poetry.dependencies]
python = "^3.10"
pytest = "^7.4.3"
pyyaml = "^6.0.1"
black = "^23.11.0"
sqlalchemy = "^2.0.23"
psycopg2 = "^2.9.0"
pyjwt = "^2.8.0"
pylint = "^3.0.2"
blackdoc = "^0.3.9"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pylint."MAIN"]
analyse-fallback-blocks = "no"
clear-cache-post-run = "no"
fail-under = 10
ignore = "CVS"
jobs = 1
limit-inference-results = 100
persistent = "yes"
py-version = 3.10
recursive = "yes"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"

[tool.pylint."BASIC"]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar"]
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
variable-naming-style = "snake_case"

[tool.pylint."EXCEPTIONS"]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint."FORMAT"]
indent-after-paren = 4
single-line-class-stmt = "no"
single-line-if-stmt = "yes"
indent-string = '    '
max-line-length = 100
max-module-lines = 1000

[tool.pylint."MESSAGES CONTROL"]

confidence = [
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINE",
]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "use-implicit-booleaness-not-comparison-to-string",
    "use-implicit-booleaness-not-comparison-to-zer",
]

[tool.pylint."TYPECHECK"]
contextmanager-decorators = "contextlib.contextmanager"
ignore-on-opaque-inference = "yes"
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-ini",
]
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint."VARIABLES"] # Regex pattern to define which classes are considered mixins.
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = "no"

[tool.pytest.ini_options]
addopts = "-s -vvv"
log_cli = "true"
log_level = "DEBUG"
